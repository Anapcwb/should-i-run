{"version":3,"sources":["styles/loadingLogo.svg","styles/Icon-material-cancel.svg","styles/headerLogo.svg","components/Loading.jsx","components/Button.jsx","components/NoSession.jsx","utilities/math.js","utilities/config.js","components/Session.jsx","components/Duration.jsx","components/Expiration.jsx","components/CloseWindowButton.jsx","components/Input.jsx","components/Marker.jsx","components/Map.jsx","apis/googleMapsApi.jsx","components/Message.jsx","components/Header.jsx","utilities/Location.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","Loading","console","log","this","props","className","src","loadingLogo","alt","message","Component","Button","id","onClick","handleClick","color","text","NoSession","onSetTimer","toRad","Value","Math","PI","getKmPerSecond","kmPerHour","geoNotificationStatus","expiryTime","locationOne","locationTwo","dist","time","distanceCanTravel","round","Date","now","fixedTimeMargin","distanceCanTravelIfYouRun","canYouMakeIt","lat1","lon1","lat2","lon2","dLat","dLon","a","sin","cos","atan2","sqrt","calculateDistanceBetweenCoordinates","lat","lng","MESSAGES","GEO_ERRORS","WALK_CONFIG","increment","totalSteps","currentStep","direction","Session","state","timer","hours","minutes","seconds","messageSeverity","intervalID","dispatchMessages","result","currentLocation","storedLocation","setState","addMessage","remainingTime","currentTime","setInterval","clearInterval","floor","formatAndDisplayTimer","math","getEarlyNotificationUnix","removeMessages","onClearSession","React","Duration","handleInput","event","duration","target","value","parts","split","hour","minute","unixExp","setTime","type","onChange","Expiration","miliseconds","getHours","getMinutes","setHours","addTimeToUnix","expiration","getDefaultExpiration","date","CloseWindowButton","closeButton","Input","isDuration","toggleButton","renderInput","onStartSession","Marker","img_src","title","Map","center","setTimer","status","clearSession","startSession","sessionStartLocation","createMapOptions","zoomControl","fullscreenControl","inputTimes","onSetExpiry","setExpiry","markers","map","marker","key","icon","unshift","options","bootstrapURLKeys","process","defaultCenter","defaultZoom","renderMarkers","renderControls","Message","msgButton","msg","Header","headerLogo","Location","mode","position","error","unixtime","onPositionReceived","coords","latitude","longitude","squareWalk","locationNotReceived","positionError","getLocation","navigator","geolocation","getCurrentPosition","watchID","watchPosition","clearPositionWatch","clearWatch","intervalWalk","clearSquareWalk","interval","App","setLocation","coordinates","location","isLoading","removeMessage","index","messages","findIndex","m","messageIdToSend","splice","messageToSend","clearMessages","unixTime","content","pushMsg","random","push","errorMessage","scheduledTasksInterval","checkMessage","checkLocation","code","Fragment","timestamp","i","length","getActiveScreen","renderMessage","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.12f379f3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loadingLogo.f2a5bd12.svg\";","module.exports = __webpack_public_path__ + \"static/media/Icon-material-cancel.3193678a.svg\";","module.exports = __webpack_public_path__ + \"static/media/headerLogo.4a08fb65.svg\";","import React, { Component } from \"react\";\nimport loadingLogo from \"../styles/loadingLogo.svg\";\nimport \"../styles/Loading.css\";\n\n//this component displays the loading screen of the app\nclass Loading extends Component {\n  render() {\n    console.log(this.props);\n    return (\n      <div className=\"loading\">\n        <div className=\"loadingTitle\">\n          <h1>Should I Run?</h1>\n        </div>\n        <div className=\"loadingLogo\">\n          <img src={loadingLogo} className=\"stylingLoadingLogo\" alt=\"logo\" />\n        </div>\n        {this.props.message && (\n          <div className=\"loadingMessage\">{this.props.message}</div>\n        )}\n        <div className=\"loadingCopyright\">\n          <p>&copy; Wild Devs London 2019</p>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Loading;\n","import React from \"react\";\nimport \"../styles/Button.css\";\n\n/*  \nThe button component takes three props: handleClick, color and text.\nhandleClick: a callback function to the  Map component\ncolor: options are blue or red. \ntext: the text of the button \n*/\nfunction Button(props) {\n  return (\n    <div id=\"buttonDiv\">\n      <button onClick={props.handleClick} className={`btn ${props.color}`}>\n        {props.text}\n      </button>\n    </div>\n  );\n}\n\nexport default Button;\n","import React from \"react\";\nimport Button from \"./Button\";\nimport \"../styles/Controls.css\";\n\n// render the 'Start Session' buton\nfunction NoSession(props) {\n  return (\n    <div className=\"controls\">\n      <Button handleClick={props.onSetTimer} text=\"NEW SESSION\" color=\"blue\" />\n    </div>\n  );\n}\n\nexport default NoSession;\n","//this containes a number of generic math functions that provide utilities for the application\n\n//this function converts users' inputs that contain hours and minutes to unix timestamp\n//for the purpose of taking expiry of the parking ticket for the duration input and then add it to the current time\nexport function durationToExpiry(hour, minute) {\n  //convert hours to seconds\n  var hrs = hour * (3600 * 1000);\n  //convert minutes to seconds\n  var mns = minute * (60 * 1000);\n  //add hour seconds and minute seconds to current time and return duration and current time\n  return hrs + mns + Date.now();\n}\n\n//this function adds hour and minute in time to unix time\nexport function addTimeToUnix(hour, minute) {\n  //convert hours to miliseconds\n  var miliseconds = hour * (3600 * 1000);\n  //convert minutes to miliseconds\n  miliseconds += minute * (60 * 1000);\n  //add hour seconds and minute seconds to midnight time in unix and return it\n  var now = new Date();\n  var hours = now.getHours();\n  var minutes = now.getMinutes();\n  var oneDay = 86400 * 1000; //one day in milliseconds\n\n  //this is to work out if the time is in the past then that means it is the day after\n  if (hour < hours) {\n    //if input hour is less than hour now that means tomorrow's time\n    return miliseconds + now.setHours(0, 0, 0, 0) + oneDay;\n  }\n  if (hour === hours && minute < minutes) {\n    //if the current hour, but minute is in the past, that means tomorrow's time\n    //setHours() is a metod of Date class that sets hour, minute, second and milisecond as parameters\n    return miliseconds + now.setHours(0, 0, 0, 0) + oneDay;\n  }\n  return miliseconds + now.setHours(0, 0, 0, 0);\n}\n\n//this function works out at what time a notification should be sent to the users\nexport function getEarlyNotificationUnix(expiryTime) {\n  //take a unix time number\n  //remove 5 minutes (60*5 in unix seconds) and 5% (100 - 5% = 95 and then tranforms it into a fraction 0.95) of the total time\n  var math = expiryTime - Date.now(); //stores duration\n  math = math * 0.95; //deduct the duration by 5%\n  math = Math.round(math - 300000); //deduct the duration by 5mins\n  //if duration less than 0 it then uses 0 to convert negative num\n  if (math < 0) {\n    math = 0;\n  }\n  //add the current time to the modified duration\n  return math + Date.now();\n}\n\n//this function takes in latitude and longitude of two locations\n//and returns the distance between them as the crow flies (in km)\nfunction calculateDistanceBetweenCoordinates(lat1, lon1, lat2, lon2) {\n  var R = 6371; // km\n  var dLat = toRad(lat2 - lat1);\n  var dLon = toRad(lon2 - lon1);\n  lat1 = toRad(lat1);\n  lat2 = toRad(lat2);\n  var a =\n    Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n    Math.sin(dLon / 2) * Math.sin(dLon / 2) * Math.cos(lat1) * Math.cos(lat2);\n  var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  var d = R * c;\n  return d;\n}\n//this function converts numeric degrees to radians and is used in calculateCoordinate function\nfunction toRad(Value) {\n  return (Value * Math.PI) / 180;\n}\n\n//this function converts km per hour to km per second\nfunction getKmPerSecond(kmPerHour) {\n  //returns km per seconds\n  return kmPerHour / 3600;\n}\n\n//this function returns an integer based on the distance and the time\n//the integer increases as the distance becomes greater or the time becomes lower\nfunction canYouMakeIt(dist, time) {\n  time = Math.round((time - Date.now()) / 1000); //time to duration\n  let distanceCanTravel = time * getKmPerSecond(1); //how far users can go\n  let fixedTimeMargin = 300 * getKmPerSecond(1); //extra margin of 5 mins if users run\n  let distanceCanTravelIfYouRun = distanceCanTravel * 2; //how far users can go if they run\n  distanceCanTravelIfYouRun += fixedTimeMargin; //final calculation if users can run with some extra time\n  let distanceCanTravelIfSlow = distanceCanTravel * 0.8; //how far users can go if they walk slowly\n\n  if (dist < distanceCanTravelIfSlow) {\n    //if users walk slowly within the distance and time\n    return 0;\n  } else {\n    if (dist > distanceCanTravel) {\n      //checks if too far\n      if (dist < distanceCanTravelIfYouRun) {\n        //check if too far when running\n        return 2; //run\n      }\n      return 3; //you are too far away\n    } else {\n      return 1; //walk\n    }\n  }\n}\n\n//this function takes in expiry time and two locations\nexport function geoNotificationStatus(expiryTime, locationOne, locationTwo) {\n  //get distance between car and person\n  const distance = calculateDistanceBetweenCoordinates(\n    locationOne.lat,\n    locationOne.lng,\n    locationTwo.lat,\n    locationTwo.lng\n  );\n\n  //return the status of canYouMakeIt\n  return canYouMakeIt(distance, expiryTime);\n}\n","// messages array\nexport const MESSAGES = [\n  \"You better head back now if you want to make it back in time\",\n  \"You can make it back in time, BUT ONLY IF YOU RUN!!!\",\n  \"Sorry, you wont make it back in time before your parking expires :(\"\n];\n\nexport const GEO_ERRORS = [\n  \"You need to enable location services, this is performed in your device settings!\",\n  \"Location unavailable, please check your internet connection!\",\n  \"Location unavailable, unable to access geo location services!\"\n];\n\nexport const TIMEXPIRY = \"Your parking time is running out!\";\n\nexport const TIMEEXPIRED = \"Your parking time has run out!\";\n\nexport const WALK_CONFIG = {\n  increment: 0.000002,\n  totalSteps: 1500,\n  currentStep: 0,\n  direction: \"forwards\"\n};\n","import React from \"react\";\nimport Button from \"./Button\";\nimport {\n  getEarlyNotificationUnix,\n  geoNotificationStatus\n} from \"../utilities/math\";\nimport { MESSAGES, TIMEEXPIRED, TIMEXPIRY } from \"../utilities/config\";\nimport \"../styles/Controls.css\";\n\n// Session formats and displays the countdown timer\nclass Session extends React.Component {\n  // initialise component state\n  state = {\n    timer: {\n      hours: 0,\n      minutes: 0,\n      seconds: 0\n    },\n    messageSeverity: 0\n  };\n\n  // initialize the intervalID (this is used to clear the interval)\n  intervalID = 0;\n\n  // calculate and format the countdown timer, and set as state\n  formatAndDisplayTimer(expiryTime) {\n    let remainingTime, currentTime, hours, minutes, seconds;\n    // TODO: refactor intervalID declaration\n    this.intervalID = setInterval(() => {\n      this.dispatchMessages();\n      currentTime = Date.now(); // get the current time\n      // get the time remaining in milliseconds\n      remainingTime = expiryTime - currentTime;\n\n      // stop the timer when time runs out\n      if (expiryTime <= currentTime) {\n        clearInterval(this.intervalID);\n        // format the timer to display 00:00:00\n        this.setState({\n          time: {\n            hours: \"00\",\n            minutes: \"00\",\n            seconds: \"00\"\n          }\n        });\n        return;\n      }\n\n      // get the hours, minutes and seconds from milliseconds\n      seconds = Math.floor((remainingTime / 1000) % 60);\n      minutes = Math.floor((remainingTime / (1000 * 60)) % 60);\n      hours = Math.floor((remainingTime / (1000 * 60 * 60)) % 24);\n\n      // format the hours, minutes and seconds for display\n      seconds = seconds < 10 ? \"0\" + seconds : seconds;\n      minutes = minutes < 10 ? \"0\" + minutes : minutes;\n      hours = hours < 10 ? \"0\" + hours : hours;\n\n      // set the hours, mins and secs in component state\n      this.setState({\n        timer: {\n          hours: hours,\n          minutes: minutes,\n          seconds: seconds\n        }\n      });\n    }, 200);\n  }\n\n  dispatchMessages = () => {\n    // check which message should be dispatched\n    // returns a severity of 0, 1, 2 or 3\n    const result = geoNotificationStatus(\n      this.props.expiryTime,\n      this.props.currentLocation,\n      this.props.storedLocation\n    );\n\n    // when the result returned is greater than the severity stored\n    // in state, update the the state to the result and send the\n    // corresponding message\n    if (result > this.state.messageSeverity) {\n      // TODO: clear messages?\n      this.setState({ messageSeverity: result });\n      this.props.addMessage(Date.now(), MESSAGES[result - 1]);\n    }\n  };\n\n  // when the session starts\n  componentDidMount() {\n    // start the interval\n    // TODO: refactor interval\n    this.formatAndDisplayTimer(this.props.expiryTime);\n\n    // queue messages to the message array\n    this.props.addMessage(this.props.expiryTime, TIMEEXPIRED);\n\n    this.props.addMessage(\n      getEarlyNotificationUnix(this.props.expiryTime),\n      TIMEXPIRY\n    );\n  }\n\n  // when session is cancelled\n  componentWillUnmount() {\n    // stop the timer\n    clearInterval(this.intervalID);\n\n    // clear messages\n    this.props.removeMessages();\n  }\n\n  render() {\n    const { hours, minutes, seconds } = this.state.timer;\n    return (\n      <div className=\"controls\">\n        {/* render the timer */}\n        <div className=\"clock\">{`${hours}:${minutes}:${seconds}`}</div>\n        <Button\n          handleClick={this.props.onClearSession}\n          text=\"DISMISS\"\n          color=\"red\"\n        />\n      </div>\n    );\n  }\n}\n\nexport default Session;\n","import React, { Component } from \"react\";\nimport { durationToExpiry } from \"../utilities/math\";\nimport \"../styles/App.css\";\nimport \"../styles/Input.css\";\n\n//collects the duration from the user\nclass Duration extends Component {\n  constructor(props) {\n    //we are using the constructor so we can set the duration prior to the render method\n    super(props);\n    this.state = {\n      duration: \"01:00\"\n    };\n  }\n\n  //handle the input on change\n  handleInput = event => {\n    var duration = event.target.value;\n    var parts = duration.split(\":\"); //spliting into minutes and hours\n\n    //input should be not less than 10 minutes\n    if (parts[0] === \"00\" && parts[1] < 10) {\n      parts[1] = \"10\";\n      duration = \"00:10\";\n    }\n\n    var unixExp = durationToExpiry(parts[0], parts[1]);\n\n    this.setState({ duration });\n    this.props.setTime(unixExp);\n  };\n\n  render() {\n    return (\n      <div className=\"timer\">\n        <input\n          className=\"inputButtonBox\"\n          type=\"time\"\n          id=\"startTime\"\n          value={this.state.duration}\n          onChange={this.handleInput}\n        ></input>\n      </div>\n    );\n  }\n}\n\nexport default Duration;\n","import React, { Component } from \"react\";\nimport { addTimeToUnix } from \"../utilities/math\";\nimport \"../styles/App.css\";\nimport \"../styles/Input.css\";\n\n//collect the expire time from the user\nclass Expiration extends Component {\n  constructor(props) {\n    //we are using the constructor so we can set the expiration prior to the render method\n    super(props);\n    this.state = {\n      expiration: this.getDefaultExpiration() //sets the expiration to a point in the future\n    };\n  }\n\n  //handle onchange of the input time\n  handleInput = event => {\n    var parts = event.target.value.split(\":\"); //convert the string in time to hours and minutes parts\n    var unixExp = addTimeToUnix(parts[0], parts[1]); //convert the parts in unix time\n\n    this.setState({ expiration: event.target.value });\n    this.props.setTime(unixExp);\n  };\n\n  //get some expiration time in the future\n  getDefaultExpiration() {\n    let date = new Date();\n    date.setHours(date.getHours() + 1); //set the hours based on getting hour plus one\n    let hours = date.getHours();\n    let minutes = date.getMinutes();\n\n    //format the hours in minutes to make sure the browser receives the correct format\n    if (hours < 10) {\n      hours = \"0\" + hours;\n    }\n    if (minutes < 10) {\n      minutes = \"0\" + minutes;\n    }\n    return hours + \":\" + minutes;\n  }\n\n  render() {\n    return (\n      <div className=\"timer\">\n        <input\n          className=\"inputButtonBox\"\n          type=\"time\"\n          id=\"startTime\"\n          value={this.state.expiration}\n          onChange={this.handleInput}\n        ></input>\n      </div>\n    );\n  }\n}\n\nexport default Expiration;\n","import React from \"react\";\nimport closeButton from \"../styles/Icon-material-cancel.svg\";\n\n// this is the X symbol button\n// it takes one callback function called handleClick\nfunction CloseWindowButton(props) {\n  return (\n    <div className=\"close-button\">\n      <img src={closeButton} alt=\"close button\" onClick={props.handleClick} />\n    </div>\n  );\n}\n\nexport default CloseWindowButton;\n","import React, { Component } from \"react\";\nimport Duration from \"./Duration\";\nimport Expiration from \"./Expiration\";\nimport CloseWindowButton from \"./CloseWindowButton\";\nimport Button from \"./Button\";\nimport \"../styles/App.css\";\nimport \"../styles/Input.css\";\n\n//input is the parent component for the collection of expiration or duration from the user\nclass Input extends Component {\n  state = {\n    isDuration: true, //false means is expiry time\n    unixExp: Date.now() + 3600000 //set a default expiry time\n  };\n\n  //callback function to updates expiry Unix time\n  setTime = unixExp => {\n    this.setState({ unixExp });\n  };\n\n  //this is function that toggles the duration and expiration\n  toggleButton = () => {\n    this.setState({ isDuration: !this.state.isDuration });\n  };\n\n  //conditionaly render duration or expiration based on the state\n  renderInput() {\n    if (this.state.isDuration) {\n      return <Duration setTime={this.setTime} />;\n    } else {\n      return <Expiration setTime={this.setTime} />;\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"backgroundPosition\">\n        <div className=\"closeBtn\">\n          <CloseWindowButton handleClick={this.props.onClearSession} />\n        </div>\n\n        {this.renderInput()}\n\n        <div className=\"container\">\n          <div>\n            <label className=\"aroundToogleButton\">Set Duration</label>\n          </div>\n          <div>\n            <label className=\"switch\">\n              <input type=\"checkbox\" onClick={() => this.toggleButton()} />\n              <span className=\"slider round\"></span>\n            </label>\n          </div>\n          <div>\n            <label className=\"aroundToogleButton\">Set Expiry</label>\n          </div>\n        </div>\n        <Button\n          className=\"btn btn-primary\"\n          text=\"START\"\n          color=\"blue\"\n          handleClick={() => this.props.onStartSession(this.state.unixExp)}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Input;\n","import React from \"react\";\nimport \"../styles/Marker.css\";\n\n// configurable marker for display on the Map\nfunction Marker(props) {\n  return (\n    <div>\n      <img className=\"marker\" src={props.img_src} alt={props.title} />\n    </div>\n  );\n}\n\nexport default Marker;\n","import React, { Component } from \"react\";\nimport GoogleMapReact from \"google-map-react\";\nimport NoSession from \"./NoSession\";\nimport Session from \"./Session\";\nimport Input from \"./Input\";\nimport Marker from \"./Marker\";\nimport \"../styles/GoogleMap.css\";\nimport GOOGLE_API_KEY from \"../apis/googleMapsApi\";\n\n// renders the GoogleMap and controls\nclass Map extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      status: \"noSession\",\n      inputTimes: null,\n      sessionStartLocation: {\n        lat: null,\n        lng: null\n      },\n      expiryTime: 0\n    };\n  }\n\n  // get the lat and long from props into an obj,\n  //which is required by GoogleMapsReact component\n  center = {\n    lat: this.props.lat,\n    lng: this.props.lng\n  };\n\n  // conditionally render the controls based on component state\n\n  renderControls() {\n    // 'setTimer' gets input from the user\n    if (this.state.status === \"setTimer\") {\n      return (\n        <Input\n          onClearSession={this.clearSession}\n          onStartSession={this.startSession}\n          onSetExpiry={this.setExpiry}\n        />\n      );\n    }\n\n    // 'inSession' displays the countdown timer and current and stored location markers\n    if (this.state.status === \"inSession\") {\n      return (\n        <Session\n          onClearSession={this.clearSession} // set state to noSession\n          expiryTime={this.state.expiryTime} // set the expiry time\n          addMessage={this.props.addMessage} // add a new message to the array\n          removeMessages={this.props.removeMessages} // clear all the messages\n          storedLocation={this.state.sessionStartLocation} // store the current location in state\n          currentLocation={{ lat: this.props.lat, lng: this.props.lng }} // take the current location from props\n        />\n      );\n    }\n\n    // display the 'Start Session' button\n    return <NoSession onSetTimer={this.setTimer} />;\n  }\n\n  // the method takes an array of marker objects and returns Marker components\n  renderMarkers(markers) {\n    if (markers !== null) {\n      return markers.map(marker => {\n        return (\n          <Marker\n            key={marker.title}\n            lat={marker.lat}\n            lng={marker.lng}\n            img_src={marker.icon}\n          />\n        );\n      });\n    }\n  }\n\n  //callback functions that set Map state from children\n  // in this state the Input controls will render\n  setTimer = () => {\n    this.setState({ status: \"setTimer\" });\n  };\n\n  // in this state the 'Home' controls will render\n  clearSession = () => {\n    this.setState({ status: \"noSession\" });\n  };\n\n  // in this state the Session controls will render\n  startSession = expiration => {\n    this.setState({\n      status: \"inSession\",\n\n      // set the current location and expiry time\n      sessionStartLocation: {\n        lat: this.props.lat,\n        lng: this.props.lng\n      },\n      expiryTime: expiration\n    });\n  };\n\n  // sets options Google Maps\n  createMapOptions = () => {\n    return {\n      zoomControl: false,\n      fullscreenControl: false\n    };\n  };\n\n  render() {\n    const markers = [\n      {\n        // this is current location of the user\n        title: \"Current Location\",\n        lat: this.props.lat,\n        lng: this.props.lng,\n        icon: \"https://i.imgur.com/9Fho7kq.png\"\n      }\n    ];\n\n    this.state.status === \"inSession\" &&\n      markers.unshift({\n        // this is the optional location of the car,\n        // only rendered once a session has begun\n        title: \"Stored Location\",\n        lat: this.state.sessionStartLocation.lat,\n        lng: this.state.sessionStartLocation.lng,\n        icon: \"https://i.imgur.com/4lwh63l.png\"\n      });\n\n    return (\n      <div id=\"map\">\n        <GoogleMapReact\n          options={this.createMapOptions} // Google Maps options\n          bootstrapURLKeys={{ key: GOOGLE_API_KEY }} //  Google Maps API key\n          defaultCenter={this.center} // lat & long values\n          defaultZoom={16} // zoom setting on the map\n        >\n          {/* render the markers on the map */}\n          {this.renderMarkers(markers)}\n        </GoogleMapReact>\n        {/* render the Input or Session controls  */}\n        {this.renderControls()}\n      </div>\n    );\n  }\n}\n\nexport default Map;\n","const GOOGLE_API_KEY = process.env.REACT_APP_GOOGLE_API_KEY;\n\nexport default GOOGLE_API_KEY;","import React, { Component } from \"react\";\nimport CloseWindowButton from \"./CloseWindowButton\";\nimport \"../styles/Message.css\";\n\n//this component displays messages\nclass Message extends Component {\n  render() {\n    return (\n      <div className=\"styleMessageContainer\">\n        {/*this line means \"including\" Button component, taking Button's props (text and handleClick) and passing msgButton property in handleClick*/}\n\n        <div className=\"styleMessage\">\n          <CloseWindowButton handleClick={this.props.msgButton} />\n          <p>{this.props.msg}</p>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Message;\n","import React, { Component } from \"react\";\nimport headerLogo from \"../styles/headerLogo.svg\";\nimport \"../styles/Header.css\";\n\n//this component is a header\nclass Header extends Component {\n  render() {\n    return (\n      <header>\n        <div className=\"header\">\n          <div className=\"headerTitle\">\n            <h1>Should I Run?</h1>\n          </div>\n          <div className=\"headerLogo\">\n            <img src={headerLogo} className=\"stylingHeaderLogo\" alt=\"logo\" />\n          </div>\n        </div>\n      </header>\n    );\n  }\n}\n\nexport default Header;\n","/**\n * This class provides location data from the Geolocation API\n * It can simulate movemnent if instantiated in 'test' mode\n * (const Location = new Location('test))\n */\nimport { WALK_CONFIG } from \"../utilities/config\";\n\nexport default class Location {\n  // the constructor initiates the getLocation process\n  constructor(mode) {\n    this.mode = mode;\n    this.getLocation();\n  }\n\n  position = {\n    error: {},\n    lat: null,\n    lng: null,\n    unixtime: null\n  };\n\n  // this method takes a positon object as an argument and sets the position\n  // property of the class. It also sets a unix timestamp\n  onPositionReceived = position => {\n    this.position.lat = position.coords.latitude;\n    this.position.lng = position.coords.longitude;\n    this.position.unixtime = Date.now();\n    // if the class is in 'test'mode, run the walking simulation\n    if (this.mode === \"test\") {\n      this.squareWalk();\n    }\n  };\n\n  // this method handles location errors\n  locationNotReceived = positionError => {\n    this.position.error = positionError; // add the error message to the position property\n    //position error object is immutable even when copied as is actually interface\n\n    //if we are in test mode, start location as London and initiates squarewalk\n    if (this.mode === \"test\") {\n      this.position.lat = 51.5;\n      this.position.lng = -0.127;\n      this.squareWalk();\n    }\n  };\n\n  // calls the Geolocation API to get the current location\n  getLocation = () => {\n    if (navigator.geolocation) {\n      // check if a location is available\n      navigator.geolocation.getCurrentPosition(\n        // gets a quick location\n        this.onPositionReceived,\n        this.locationNotReceived\n      );\n      if (this.mode !== \"test\") {\n        this.watchID = navigator.geolocation.watchPosition(\n          // update location when more accurate data available\n          this.onPositionReceived,\n          this.locationNotReceived\n        );\n      }\n    }\n  };\n\n  // This method can be called stop the watchPosition method\n  clearPositionWatch = () => {\n    navigator.geolocation.clearWatch(this.watchID);\n  };\n\n  // initiate the simulated movement (when in test mode)\n  squareWalk = () => {\n    this.intervalID = setInterval(() => this.intervalWalk(), 100);\n  };\n\n  // update the coordinates\n  intervalWalk = () => {\n    // increment or decrement the longitide or lattitude based on the direction\n    if (WALK_CONFIG.currentStep < WALK_CONFIG.totalSteps) {\n      if (\n        WALK_CONFIG.direction === \"forwards\" ||\n        WALK_CONFIG.direction === \"backwards\"\n      ) {\n        this.position.lat =\n          WALK_CONFIG.direction === \"forwards\"\n            ? (this.position.lat += WALK_CONFIG.increment)\n            : (this.position.lat -= WALK_CONFIG.increment);\n      } else if (\n        WALK_CONFIG.direction === \"left\" ||\n        WALK_CONFIG.direction === \"right\"\n      ) {\n        this.position.lng =\n          WALK_CONFIG.direction === \"left\"\n            ? (this.position.lng += WALK_CONFIG.increment)\n            : (this.position.lng -= WALK_CONFIG.increment);\n      }\n      WALK_CONFIG.currentStep += 1;\n    } else {\n      // reset the counter and change direction\n      WALK_CONFIG.currentStep = 0;\n      WALK_CONFIG.direction =\n        WALK_CONFIG.direction === \"forwards\"\n          ? \"left\"\n          : WALK_CONFIG.direction === \"left\"\n          ? \"backwards\"\n          : WALK_CONFIG.direction === \"backwards\"\n          ? \"right\"\n          : \"forwards\";\n    }\n  };\n\n  // can be used to stop the simulation\n  clearSquareWalk = () => {\n    clearInterval(this.interval);\n  };\n}\n","import React, { Component } from \"react\";\nimport Loading from \"./Loading\";\nimport Map from \"./Map\";\nimport Message from \"./Message\";\nimport Header from \"./Header\";\nimport Location from \"../utilities/Location\";\nimport \"../styles/App.css\";\nimport { GEO_ERRORS } from \"../utilities/config\";\n\n//this is the main component\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      //state.location is dynamically updated with getLocation method\n      location: {\n        lat: null,\n        lng: null,\n        time: null,\n        errorMessage: \"\"\n      },\n      isLoading: true,\n      messageToSend: \"\",\n      messageIdToSend: 0,\n      messages: []\n    };\n\n    //this method is called inside the constructor method, because it manipulates the state\n    this.location = new Location(\"test\"); // call with 'test' as argument for testing\n  }\n\n  componentDidMount() {\n    //this.interval is a variable created in this App class component that runs the timer for scheduled tasks\n    this.interval = setInterval(() => this.scheduledTasksInterval(), 1000);\n  }\n\n  //this is run every second by the timer\n  scheduledTasksInterval() {\n    this.checkMessage();\n    this.checkLocation();\n  }\n\n  //this function is checking if there is a location available\n  checkLocation() {\n    if (this.location.position.lat !== null) {\n      this.setLocation();\n    }\n    if (this.location.position.error.code) {\n      this.setState({\n        location: {\n          errorMessage: GEO_ERRORS[this.location.position.error.code - 1]\n        }\n      });\n    }\n  }\n\n  //this function sets the location of users when there is a location available\n  setLocation = () => {\n    let coordinates = {};\n    //these setState change the state.location.lat and state.location.lng dynamically\n    //with the coordinates variable to retrieve user's current location,\n    //change state.isLoading to false to notify that the loading screen has been loaded\n    coordinates.lat = this.location.position.lat;\n    coordinates.lng = this.location.position.lng;\n    this.setState({ location: coordinates });\n    this.setState({ isLoading: false });\n  };\n\n  //this method is a conditional rendering that checks isLoading\n  //if it remains true, then displays Loading subcomponent, else, displays Map subcomponent.\n  getActiveScreen() {\n    //console.log(this.state.errorMessages);\n    if (this.state.isLoading) {\n      return <Loading message={this.state.location.errorMessage} />;\n    }\n    return (\n      <React.Fragment>\n        <Header />\n        <Map\n          lat={this.state.location.lat}\n          lng={this.state.location.lng}\n          timestamp={this.state.location.time}\n          removeMessages={this.clearMessages}\n          addMessage={this.addMessage}\n        />\n      </React.Fragment>\n    );\n  }\n\n  //this function checks if there is a message to be delivered\n  checkMessage() {\n    for (let i = 0; i < this.state.messages.length; i++) {\n      //for each object in messages array, check if its time is less than the current time\n      if (this.state.messages[i].time < Date.now()) {\n        //this stores the content of the message in messageToSend empty string value\n        this.setState({\n          messageToSend: this.state.messages[i].content,\n          messageIdToSend: this.state.messages[i].id\n        });\n      }\n    }\n  }\n\n  //this is s conditional rendering to check whether there is a message due to be delivered\n  //and display it in Message subcomponent, otherwise return nothing\n  renderMessage() {\n    if (this.state.messageToSend === \"\") {\n      return;\n    }\n    return (\n      <Message msgButton={this.removeMessage} msg={this.state.messageToSend} />\n    );\n  }\n\n  //this is a callback function; therefore, it uses fat arrow function to bind the function in this class component\n  //this function removes a message from the messages array\n  removeMessage = () => {\n    //remove every content in messages array by comparing the index of messages.id with the index of messageIdToSend\n    var index = this.state.messages.findIndex(\n      m => m.id === this.state.messageIdToSend\n    );\n    this.state.messages.splice(index, 1);\n    this.setState({ messageToSend: \"\" });\n  };\n\n  //this function clears all messages\n  clearMessages = () => {\n    this.setState({ messageToSend: \"\" });\n    this.setState({ messages: [] });\n  };\n\n  //this function adds a message to the messages array\n  addMessage = (unixTime, content) => {\n    //create an obj based on the inputs\n    var pushMsg = {\n      id: Math.round(Math.random() * 1000000000),\n      time: unixTime,\n      content: content\n    };\n\n    //push this obj into messages array\n    this.state.messages.push(pushMsg);\n  };\n\n  render() {\n    return (\n      <div className=\"styleApp\">\n        {/*this method is called inside the render method, because it outputs the display*/}\n        {this.getActiveScreen()}\n        {/*this is a conditional rendering using shorthand if statement that only applies when a method cannot be called from the render method because it has more than one or two rendering methods at once*/}\n        {!this.state.isLoading ? this.renderMessage() : null}\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}